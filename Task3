# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

def division (a, b):
    try:
        return a / b
    except ZeroDivisionError:
        return "Нельзя делить на ноль!"
    except TypeError:
        return 'Неверный тип данных!'


print(division(5, 6))
print(division(5, 0))
print(division(5, '6'))


# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия, год
# рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Осуществить
# вывод данных о пользователе одной строкой.

def info (**kwargs):
    return f"Имя: {kwargs['name']},Фамилия: {kwargs['surname']}, Год рождение: {kwargs['yearOfBirth']}, Город: " \
           f"{kwargs['town']}, Почта:{kwargs['email']}, Телефон: {kwargs['phoneNumber']}"


print(info(name='Irina', surname='surname', yearOfBirth='1992', town='Novosibirsk', email="Kirina92@rambler.ru", \
           phoneNumber='223344'))


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух
# аргументов.
def my_func (a, b, c):
    return sum(sorted([a, b, c])[1:])


print(my_func(2, 15, 1))

'''
4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x 
в степень y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции 
возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй — 
более сложная реализация без оператора **, предусматривающая использование цикла.
'''
funcPow1 = lambda x, y: x ** y


def funcPow (x, y):
    multiple = 1
    for i in range(abs(y)):
        multiple = multiple * (1 / x)
    return multiple


def my_func2 (x: float, y: int) -> float:
    if y > 0:
        return
    elif y == 0:
        return 1
    elif x < 0:
        return
    else:
        return funcPow(x, y)  # or funcPow1


print(my_func2(2, -3))

'''
5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма
 чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел
  будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введён после
нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
'''


def request ():
    flag = True
    s = 0
    while flag:
        string = input('Введите числа через пробел. Для остановки нажмите N: ')
        if not 'N' in string:
            s += sum(map(lambda x: int(x), string.strip().split()))
        print("Промежуточная сумма: ", s)

        if 'N' in string:
            s += sum(map(lambda x: int(x), string.strip()[:-2].split()))
            print("Конечная сумма: ", s)
            flag = False
            return 'Выход!'


print(request())

'''
 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной
  первой буквой. Например, print(int_func(‘text’)) -> Text.
'''
int_func = lambda x: x.title()

'''
7.
'''


def int_func1 (words):
    return ' '.join(map(int_func, words.split()))


print(int_func1('шла Саша по шоссе'))
